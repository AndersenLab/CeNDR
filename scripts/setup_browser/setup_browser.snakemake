import os
from subprocess import Popen, PIPE

configfile: "setup_browser.yaml"

snpeff_vcf = os.path.expanduser(config["snpeff_vcf"])
filter_vcf = os.path.expanduser(config["filter_vcf"])
sample_list = Popen(["bcftools", "query", "--list-samples", snpeff_vcf], stdout=PIPE).communicate()[0].decode("utf-8").splitlines()


rule all:
    input:
        "jobs/directories.done",
        "jobs/gene_track.done",
        "jobs/transcripts_file.done",
        "jobs/dummy_samples.done",
        "jobs/samples.done",
        expand("upload/effect.{severity}.bed.idx", severity = ["LOW", "MODERATE", "HIGH"])


# Create directories
rule create_dirs:
    output:
        touch("jobs/directories.done")
    shell:
        """
            mkdir -p jobs
            mkdir -p upload
            mkdir -p data
            mkdir -p dummy
        """

# Prepare transcripts file
rule transcripts_file:
    output:
        temp("elegans_genes.bb"),
        expand("upload/elegans_transcripts.bed", build = config["build"]),
        expand("upload/elegans_transcripts.bed.idx", build = config["build"]),
        touch("jobs/transcripts_file.done"),
        temp("igv.log")
    shell:
        """
        curl ftp://ftp.wormbase.org/pub/wormbase/releases/WS253/MULTI_SPECIES/hub/elegans/elegans_genes_WS245.bb > {output[0]}
        BigBedToBed {output[0]} {output[1]}
        igvtools index {output[1]}
        """

# Download wormbase GFF
rule fetch_gff:
    params:
        annotation_build=config["annotation_build"]
    output:
        gff = expand("data/c_elegans.annotations.{build}.gff3.gz", build = config["annotation_build"])
    shell:
        """
        curl ftp://ftp.wormbase.org/pub/wormbase/releases/{params.annotation_build}/species/c_elegans/PRJNA13758/c_elegans.PRJNA13758.{params.annotation_build}.annotations.gff3.gz > {output.gff}
        """

rule filter_gff:
    input:
        rules.fetch_gff.output
    output:
        genes = "data/genes.gff",
        temp_genes = temp("temp_genes.gff")
    shell:
        """
            gzcat {input} | grep 'locus' > {output.temp_genes}
            sortBed -i {output.temp_genes} > {output.genes}
        """

# Generate Gene Track BED File
rule gene_track:
    input:
        rules.filter_gff.output.genes
    output:
        "upload/elegans_gene.bed",
        touch("jobs/gene_track.done")
    shell:
        """
            gawk '{{ match($0, "locus=([^;\t]+)", f); print $1 "\t" $2 "\t" $3 "\t" f[1] "\t" 100 "\t" $6 "\t" $2 "\t" $3  "\t0\t1\t" $3 - $2 - 1 "\t0"  }}' {input} > {output[0]}
        """


rule all_severity_tracks:
    input: expand('upload/effect.{severity}.bed', severity = ["LOW", "MODERATE", "HIGH"])


# Generate LOW MED HIGH Tracks
rule severity_tracks:
    params:
        andersen_vcf = snpeff_vcf
    output:
        "upload/effect.{severity}.bed"
    shell:
        """
        bcftools view --apply-filters PASS {params.andersen_vcf} | grep {wildcards.severity} | awk '$0 !~ "^#" {{ print $1 "\t" ($2 - 1) "\t" ($2)  "\t" $1 ":" $2 "\t0\t+"  "\t" $2 - 1 "\t" $2 "\t0\t1\t1\t0" }}' - > {output}
        """

rule index_severity:
    input:
        "upload/effect.{severity}.bed"
    output:
        "upload/effect.{severity}.bed.idx",
    shell: "igvtools index {input}"


rule all_input_samples:
    input: expand("upload/strain.{strain}.vcf.gz{ext}", strain = sample_list, ext = ["",".tbi"])
    output:
        touch("jobs/samples.done")

# Generate Output VCFs
rule ind_vcf_tracks:
    params:
        andersen_vcf = filter_vcf
    output:
        "upload/strain.{strain}.vcf.gz"
    shell:
        """
        bcftools view --threads 4 -O z --samples {wildcards.strain} {params.andersen_vcf} | bcftools view --genotype ^miss -O z > {output}
        """

rule index_vcf_tracks:
    input:
        "upload/strain.{strain}.vcf.gz"
    output:
        "upload/strain.{strain}.vcf.gz.tbi"
    shell: "tabix {input}"

